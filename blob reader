using Microsoft.WindowsAzure.Storage;
using Microsoft.WindowsAzure.Storage.Auth;
using Microsoft.WindowsAzure.Storage.Blob;
using Microsoft.WindowsAzure.Storage.RetryPolicies;
using System;
using System.IO;
using System.Net;

namespace ConsoleApp2
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Hello World!");
            //
            //connection string
            string storageAccount_connectionString = "DefaultEndpointsProtocol=https;AccountName=demostoragelbaccount;AccountKey=IxagsPuqhZojNF9lCcnULzHIXMQDhVEwAAouwuxucS85fZpcgPaJ4iFuHu+Ey2OahypjHO/uAD6ZwpWHqSr7tg==;EndpointSuffix=core.windows.net";

            // Retrieve storage account from connection string.
            CloudStorageAccount storageAccount = CloudStorageAccount.Parse(storageAccount_connectionString);

            // Create the blob client.
            CloudBlobClient blobClient = storageAccount.CreateCloudBlobClient();

            // Retrieve reference to a previously created container.
            CloudBlobContainer container = blobClient.GetContainerReference("lbdemocontainers");
            //The specified container does not exist

            //blobClient.blob
            try
            {
                //root directory
                CloudBlobDirectory dira = container.GetDirectoryReference(string.Empty);
                //true for all sub directories else false 
                var rootDirFolders = dira.ListBlobsSegmentedAsync(true, BlobListingDetails.Metadata, null, null, null, null).Result;

                foreach (var blob in rootDirFolders.Results)
                {
                    Console.WriteLine(blob.Container.Name.ToString());
                    Console.WriteLine(blob.StorageUri.ToString());
                    Console.WriteLine(blob.Uri.ToString());
                }
                string text = new WebClient().DownloadString("https://demostoragelbaccount.blob.core.windows.net/lbdemocontainers/sample.txt");
                Console.ReadLine();
            }
            catch (Exception e)
            {
                //  Block of code to handle errors
                Console.WriteLine("Error", e);

            }
        }
        private static void DownloadLargeFile()
        {
            var account = new CloudStorageAccount(new StorageCredentials("test", "test"), true);
            var blobClient = account.CreateCloudBlobClient();
            var container = blobClient.GetContainerReference("container-name");
            var file = "my-very-large-file-name";
            var blob = container.GetBlockBlobReference(file);
            //First fetch the size of the blob. We use this to create an empty file with size = blob's size
            blob.FetchAttributesAsync();
            var blobSize = blob.Properties.Length;
            long blockSize = (1 * 1024 * 1024);//1 MB chunk;
            blockSize = Math.Min(blobSize, blockSize);
            //Create an empty file of blob size
            using (FileStream fs = new FileStream(file, FileMode.Create))//Create empty file.
            {
                fs.SetLength(blobSize);//Set its size
            }
            var blobRequestOptions = new BlobRequestOptions
            {
                RetryPolicy = new ExponentialRetry(TimeSpan.FromSeconds(5), 3),
                MaximumExecutionTime = TimeSpan.FromMinutes(60),
                ServerTimeout = TimeSpan.FromMinutes(60)
            };
            long currentPointer = 0;
            long bytesRemaining = blobSize;
            do
            {
                var bytesToFetch = Math.Min(blockSize, bytesRemaining);
                using (MemoryStream ms = new MemoryStream())
                {
                    //Download range (by default 1 MB)
                    //blob.DownloadRangeToStreamAsync(ms, currentPointer, bytesToFetch, null, blobRequestOptions);
                    ms.Position = 0;
                    var contents = ms.ToArray();
                    using (var fs = new FileStream(file, FileMode.Open))//Open that file
                    {
                        fs.Position = currentPointer;//Move the cursor to the end of file.
                        fs.Write(contents, 0, contents.Length);//Write the contents to the end of file.
                    }
                    currentPointer += contents.Length;//Update pointer
                    bytesRemaining -= contents.Length;//Update bytes to fetch
                }
            }
            while (bytesRemaining > 0);
        }

    }
    

}
